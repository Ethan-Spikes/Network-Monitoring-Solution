#!/bin/bash

#this is the script you run to do everything this script is meant to do.

#Welcome to secure1host. It's a pet project of mine.

#This program, as it stands right now, was built with the idea that if I want to set up a personal computer securely, I should have the means to do it easily and scaleably.  I want this program to allow people to set up and configure their system and trust that it's more secure than most systems and will tell you if there's signs of an intrusion in many cases.

#I'm thinking about changing the name to secure1debian and then making another one called secure1windows10. It's definitely on my list of things to do.

#The structure is simple. We update our software, then set up automatic updates, then set up the firewall, then we start doing system audit and configuration, then we enable sustainable logging for a small system, then we build automated detection, alerting, and response instrumentation around the security posture we've built ourselves prior to this final step.

#Things are changing as I work on this, and when I can get to it it's very fun.



########################################################################################

################################################Begin importing arguments


ARGS=$(getopt --options 'cdih' --long "configure,default,interactive,help" -- "$@")

set -- "$ARGS"

configure="false"
default="false"
interactive="false"

###############################################Begin Utility Functions



Full_System_Update() {

		sudo apt -y update
		sudo apt -y full-upgrade
		sudo apt -y autoremove
		sudo apt -y autoclean
		
}

Tools_Update() {

		sudo apt -y update
		sudo apt -y install nmap netsecure ufw lynis
		sudo apt -y full-upgrade nmap netsecure ufw lynis
		sudo apt -y autoremove
		sudo apt -y autoclean
		
}



Display_Crontab() {

	echo "---Displaying user crontab---"
	echo " "
	crontab -l
	echo " "
	echo "---Displaying root crontab---"
	echo " "
	sudo crontab -l
	echo " "
	echo "Accessable crontabs displayed"
	echo " "

}

Erase_Crontab() {

	echo " " | crontab -
	echo " " | sudo crontab -
	echo "user and root crontabs erased"
	echo " "

}

Auto_System_Updates() {
	
	echo "0 1 * * * apt -y update 
1 1 * * * apt -y upgrade 
2 1 * * * apt -y autoremove 
3 1 * * * apt -y autoclean " | sudo crontab -

}


Firewall_Reset_Default() {

	sudo ufw enable
	sudo ufw reset ###need to figure out how to do this without it asking me permission
	sudo ufw enable

}

Display_Firewall_Status() {

	echo "---Displaying UFW Firewall status---"
	echo " "
	sudo ufw status verbose
	echo " "

}

Basic_Net_Scan() {
	
		echo "---Initiating basic network scan---"
		echo " "
		First_Three=$(ifconfig | grep netmask | awk '/broadcast/ {print $2}' | cut -d "." -f 1,2,3 | uniq)
		Net=$(ip addr show | grep inet | grep brd | tr '/' ' ' | awk '{print $3}')
		ID=$(ifconfig | grep netmask | awk '/broadcast/ {print $4}' | tr '.' ' ' | awk '{print $4}')
		sudo nmap $First_Three.$ID/$Net
		echo " "
	
}

Firewall_Whitelist_Single_Out_Port() {

	sudo ufw allow out $port

}


Lynis_Hardening_Audit() {

	echo 'system will now do an internal audit'
	sudo lynis audit system

}

Lynis_Pentest_Audit() {

	echo 'system will now do an internal pentest'
	sudo lynis --pentest audit system

}

Application_Whitelisting() {

	echo 'application whitelisting not made yet'

}

Enable_Logging() {

	echo 'not made yet'
	#do one thing

}

Hashing_Files_and_Executables() {

	echo 'not made yet'
	
}

Scanning_Self_For_Vulnerabilities() {
	
	echo 'not made yet'
	
}

Monitoring_Neighbors() {

	echo 'not made yet'
	
}

User_Whitelisting() {

	echo 'not made yet'
	
}

User_Monitoring() {

	echo 'not made yet'
	
}

Password_Checker() {

	echo 'not made yet'
	
}

Monitor_Host_File() {

	echo 'not made yet'
	
}

Set_up_Netcat_scan_detector() {

	echo 'not made yet'
	
}

Plant_honey_credentials() {

	echo 'not made yet'
	
} 

Enable_network_traffic_monitoring() {

	echo 'not made yet'
	
}

set_up_snort() {

	echo 'not made yet'
	
}

Enable_Honey_Ports() {

	echo 'not made yet'
	
}

Enable_Honey_Hashes() {

	echo 'not made yet'
	
}

Frustrate_Scanning_Efforts() {

	echo 'not made yet'
	
}

Frustrate_Privesc_Efforts() {

	echo 'not made yet'
	
}

Respond_To_Scanning() {

	echo 'not made yet'
	
}

Trip_to_monitor() {

	echo 'not made yet'
	
}

Trip_to_Ban() {

	echo 'not made yet'
	
} 

Trip_to_report() {

	echo 'not made yet'
	
}

Automated_Response() {

	echo 'not made yet'
	#do one thing

}

###########################################Begin Configuration Handling Functions

Root_Check() {

	user=$(whoami)
	if [ $user != root ]; then
		echo 'Permission denied. Please run sudo secure1host -h'
		exit
	fi

}

Help() {
	
	echo 'Displaying help:'
	echo ' '
	echo 'secure1host runs in Auto Mode and Interactive Mode.'
	echo ' '
	echo 'to run in Interactive Mode, run "sudo secure1host --(i)nteractive"'
	echo 'to run in Auto Mode, run "sudo secure1host"'
	
	echo ' '
	echo 'Auto Mode runs with default settings unless configured (-c)'
	echo 'this will modify your configurations as you go, but you can use a keyboard interrupt to cancel at any time'
	echo ' '
	echo 'to reset secure1host to defualt mode, run "sudo secure1host --(d)efault"'
	echo 'this will not delete the configurations you have made.'
	echo ' '
	echo 'to display this help, run "sudo secure1host --(h)elp"'

}

create_config_file() {

	touch secure1host.config
	Method='default' >> secure1host.config

}

default_reset() {

	echo "setting Method variable to default" #echo figure out how to change method variable to default
	exit

}

###########################################Begin Default Config Variables

default_configs() {

	echo "loading default variables" #structure and determine auto mode to determine what these variables are to be
	Method='default'
	
}

###########################################Begin Interactive mode

Interractive_Mode() { #this one will negotiate with the user

	#Begin System Updates Procedure
	
	echo "would you like to run a full upgrade of the system?(y/n)"
	read answer
	echo " "
	if [ $answer == 'y' ]; then
		echo "Beginning full system upgrade"
		echo " "
		Full_System_Update
		echo "System fully upgraded"
		echo " "
	fi
	echo "would you like to install/update all tools used in this script?(y/n)"
	read answer
	echo " "
	if [ $answer == 'y' ]; then
		echo "Beginning tools update"
		echo " "
		Tools_Update
		echo "tools fully installed and updated"
		echo " "
	fi
	Display_Crontab
	echo "Would you like to erase all crontab items?(y/n)"
	read answer
	echo " "
	if [ $answer == 'y' ]; then
		Erase_Crontab
		Display_Crontab
	fi
	echo "Would you like to create a cron job to run an upgrade of the system at 1AM every morning to protect it from vulnerabilities?(y/n)"
	read answer
	echo " "
	if [ $answer == 'y' ]; then
		Auto_System_Updates
		Display_Crontab
	fi
	
	#Begin Firewall Defaults Procedure
	
	Display_Firewall_Status
	echo "would you like to enable a default UFW firewall?(only permits outgoing connections)"
	echo "This will flush all user configurations on UFW.(y/n)"
	read answer
	echo " "
	if [ $answer == 'y' ]; then
		Firewall_Reset_Default
		Display_Firewall_Status
	fi
	
	#Begin Basic Net Scan Procedure
	
	echo "Would you like to do a simple scan of the subnet? This information can be used to create an outgoing connection whitelist in our next step. Be advised, if you have your Firewall's default outbound permissions set to deny, this will create 10 error messages at the start.(y/n)"
	read answer
	echo " "
	if [ $answer == 'y' ]; then
		Basic_Net_Scan
	fi
	
	#Begin Firewall Outgoing Whitelist Procedure
	
	echo "would you like to make a whitelist for outgoing connections? This will block all connections through unauthorized ports, allowing for further logging.(y/n)"
	read answer
	echo " "
	if [ $answer == 'y' ]; then
		while [ $answer == 'y' ]; do
			echo 'name a port to whitelist (recommend one of these; 993, 6969, 53, http, https, 465, 587)'
			read port
			Firewall_Whitelist_Single_Out_Port
			echo " "
			echo "outbound $port connections permitted. go again?(y/n)"
			read answer
			echo " "
		done
		sudo ufw default deny outgoing
	else
		sudo ufw default allow outgoing
	fi
	Display_Firewall_Status
	
	#Begin Lynis Hardening Audit
	
	echo "would you like to audit your system for hardening?(y/n)"
	read answer
	if [ $answer == 'y' ]; then
		while [ $answer == 'y' ]; do
			Lynis_Hardening_Audit
			echo 'Take the time to correct these vulnerabilities, then answer this; Would you like to rerun that audit to see the results of your changes?(y/n)'
			read answer
		done


	fi
	
	#Begin Lynis Pentest Audit
	
	echo "would you like to pentest your system?(y/n)"
	read answer
	if [ $answer == 'y' ]; then
		while [ $answer == 'y' ]; do
			Lynis_Pentest_Audit
			echo 'Take the time to correct these vulnerabilities, then answer this; Would you like to rerun that pentest to see the results of your changes?(y/n)'
			read answer
		done


	fi
	
	#Begin Logging Enable
	
	echo "would you like to enable (fill in the blank) logging?(y/n)"
	read answer
	if [ $answer == 'y' ]; then
		Enable_Logging
	fi
	
	#Begin Automated Detection and Response
	
	echo "would you like to enable and configure automated detection and response actions?(y/n)"
	read answer
	if [ $answer == 'y' ]; then
		Automated_Response
	fi
	
	#Interactive Mode Complete, exit.
	
	echo "secure1host complete. Terminating script."
	exit
	
}

############################################Begin Configuration Mode

Config_File_Update() {

	echo "first thing, sets method to user"
	echo "then is an interactive mode for editing the config file"
	#set up and define varaiables for Auto Mode to determine what the configuration procedure for the config file is to be.

}

############################################Begin Auto Mode

Auto_Mode() {

	echo "test if config file is there, if not there, load default configuration into a new config file, including the method variable"
	echo "load config file variables, where the variable after Method is behind an if statement checking for Method" #learn how to load config file, as a part of declaring variables
	Method='default' #remove this after config file set up
	
	if [ $Method == "default" ]; then
		default_configs
	fi
	if [ $Method == "user" ]; then
		echo "loading user variables"
	fi
	echo "running through procedure, where the variables determine behavior"
	

}

############################################Begin Main function

Main() {

	#checks if running as root, kicks you out if not
	
	Root_Check
	
	#changes settings based on options
	
	echo "Welcome to secure1host!"
	echo "Only interactive mode (-i) and help (-h) has been designed. Auto Mode and supporting functions are in progress, as are methods of output and several core functions."
	echo "-----------------------------"
	echo " "
	
	for i in $ARGS; do
		case "$i" in
			-c | --configure)
				configure="true"
				echo "this will configure user settings"
				shift;;
			-d | --default)
				default="true"
				echo "this will return Auto Mode to default."
				shift;;
			-i | --interactive)
				interactive="true"
				echo "this will launch interactive mode"
				shift;;
			-h | --help)
				Help
				exit;;
			--)
				break;;

		esac
	done
	
	#executes based on settings
	
	if [ "$interactive" == true ]; then
		echo "executing in interactive mode"
		echo " "
		Interractive_Mode
	fi
	
	if [ "$configure" == true ]; then
		echo "setting to user mode and updating config file"
		echo " "
		Config_File_Update
		echo "to return to default mode from user mode, run 'sudo secure1host --default'"
		echo " "
	fi
	
	if [ "$default" == true ]; then
		echo "returning secure1host to default mode"
		echo " "
		default_reset
	fi
	
	if [ "$interactive" != true ] && [ "$configure" != true ] && [ "$default" != true ];then
		echo "running secure1host's Auto Mode"
		echo " "
		Auto_Mode
		
	fi
	
	
	
	
	

}

Main
